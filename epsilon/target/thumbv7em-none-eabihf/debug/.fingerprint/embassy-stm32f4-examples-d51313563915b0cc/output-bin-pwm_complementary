{"$message_type":"diagnostic","message":"the trait bound `PE9: Channel1Pin<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\bin\\pwm_complementary.rs","byte_start":543,"byte_end":587,"line_start":19,"line_end":19,"column_start":15,"column_end":59,"is_primary":true,"text":[{"text":"    let ch1 = PwmPin::new_ch1(p.PE9, OutputType::PushPull);","highlight_start":15,"highlight_end":59}],"label":"the trait `Channel1Pin<_>` is not implemented for `PE9`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `Channel1Pin<T>`:\n  <PA0 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\n  <PA0 as Channel1Pin<embassy_stm32::peripherals::TIM5>>\n  <PA15 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\n  <PA2 as Channel1Pin<TIM9>>\n  <PA5 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\n  <PA6 as Channel1Pin<embassy_stm32::peripherals::TIM3>>\n  <PA8 as Channel1Pin<TIM1>>\n  <PB4 as Channel1Pin<embassy_stm32::peripherals::TIM3>>\nand 3 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `PwmPin::<'d, T, embassy_stm32::timer::simple_pwm::Ch1>::new_ch1`","code":null,"level":"note","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\timer\\simple_pwm.rs","byte_start":1555,"byte_end":1562,"line_start":49,"line_end":49,"column_start":15,"column_end":22,"is_primary":false,"text":[{"text":"channel_impl!(new_ch1, Ch1, Channel1Pin);","highlight_start":15,"highlight_end":22}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\timer\\simple_pwm.rs","byte_start":1082,"byte_end":1095,"line_start":34,"line_end":34,"column_start":59,"column_end":72,"is_primary":true,"text":[{"text":"            pub fn $new_chx(pin: impl Peripheral<P = impl $pin_trait<T>> + 'd, output_type: OutputType) -> Self {","highlight_start":59,"highlight_end":72}],"label":"required by this bound in `PwmPin::<'d, T, Ch1>::new_ch1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\timer\\simple_pwm.rs","byte_start":1541,"byte_end":1581,"line_start":49,"line_end":49,"column_start":1,"column_end":41,"is_primary":false,"text":[{"text":"channel_impl!(new_ch1, Ch1, Channel1Pin);","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"channel_impl!","def_site_span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\timer\\simple_pwm.rs","byte_start":771,"byte_end":796,"line_start":30,"line_end":30,"column_start":1,"column_end":26,"is_primary":false,"text":[{"text":"macro_rules! channel_impl {","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `PE9: Channel1Pin<_>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\pwm_complementary.rs:19:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let ch1 = PwmPin::new_ch1(p.PE9, OutputType::PushPull);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Channel1Pin<_>` is not implemented for `PE9`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Channel1Pin<T>`:\u001b[0m\n\u001b[0m             <PA0 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\u001b[0m\n\u001b[0m             <PA0 as Channel1Pin<embassy_stm32::peripherals::TIM5>>\u001b[0m\n\u001b[0m             <PA15 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\u001b[0m\n\u001b[0m             <PA2 as Channel1Pin<TIM9>>\u001b[0m\n\u001b[0m             <PA5 as Channel1Pin<embassy_stm32::peripherals::TIM2>>\u001b[0m\n\u001b[0m             <PA6 as Channel1Pin<embassy_stm32::peripherals::TIM3>>\u001b[0m\n\u001b[0m             <PA8 as Channel1Pin<TIM1>>\u001b[0m\n\u001b[0m             <PB4 as Channel1Pin<embassy_stm32::peripherals::TIM3>>\u001b[0m\n\u001b[0m           and 3 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `PwmPin::<'d, T, embassy_stm32::timer::simple_pwm::Ch1>::new_ch1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\timer\\simple_pwm.rs:49:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mchannel_impl!(new_ch1, Ch1, Channel1Pin);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `PwmPin::<'d, T, Ch1>::new_ch1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `channel_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}

{"$message_type":"diagnostic","message":"the trait bound `PC1: AdcChannel<ADC1>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\bin\\adc.rs","byte_start":1700,"byte_end":1708,"line_start":53,"line_end":53,"column_start":35,"column_end":43,"is_primary":true,"text":[{"text":"        let v = adc.blocking_read(&mut pin);","highlight_start":35,"highlight_end":43}],"label":"the trait `AdcChannel<ADC1>` is not implemented for `PC1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\bin\\adc.rs","byte_start":1686,"byte_end":1699,"line_start":53,"line_end":53,"column_start":21,"column_end":34,"is_primary":false,"text":[{"text":"        let v = adc.blocking_read(&mut pin);","highlight_start":21,"highlight_end":34}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `AdcChannel<T>`:\n  <AnyAdcChannel<T> as AdcChannel<T>>\n  <PA0 as AdcChannel<ADC1>>\n  <PA1 as AdcChannel<ADC1>>\n  <PA2 as AdcChannel<ADC1>>\n  <PA3 as AdcChannel<ADC1>>\n  <PA4 as AdcChannel<ADC1>>\n  <PA5 as AdcChannel<ADC1>>\n  <PA6 as AdcChannel<ADC1>>\nand 6 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::adc::_version::<impl embassy_stm32::adc::Adc<'d, T>>::blocking_read`","code":null,"level":"note","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\adc\\v2.rs","byte_start":5261,"byte_end":5274,"line_start":181,"line_end":181,"column_start":56,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn blocking_read(&mut self, channel: &mut impl AdcChannel<T>) -> u16 {","highlight_start":56,"highlight_end":69}],"label":"required by this bound in `embassy_stm32::adc::_version::<impl Adc<'d, T>>::blocking_read`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `PC1: AdcChannel<ADC1>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\adc.rs:53:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let v = adc.blocking_read(&mut pin);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AdcChannel<ADC1>` is not implemented for `PC1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `AdcChannel<T>`:\u001b[0m\n\u001b[0m              <AnyAdcChannel<T> as AdcChannel<T>>\u001b[0m\n\u001b[0m              <PA0 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA1 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA2 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA3 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA4 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA5 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m              <PA6 as AdcChannel<ADC1>>\u001b[0m\n\u001b[0m            and 6 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::adc::_version::<impl embassy_stm32::adc::Adc<'d, T>>::blocking_read`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\adc\\v2.rs:181:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn blocking_read(&mut self, channel: &mut impl AdcChannel<T>) -> u16 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `embassy_stm32::adc::_version::<impl Adc<'d, T>>::blocking_read`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}

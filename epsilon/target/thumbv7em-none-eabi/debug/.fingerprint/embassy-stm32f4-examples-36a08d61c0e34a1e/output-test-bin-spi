{"$message_type":"diagnostic","message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src\\bin\\spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: can't find crate for `test`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `PC10: SckPin<embassy_stm32::peripherals::SPI3>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\bin\\spi.rs","byte_start":464,"byte_end":525,"line_start":20,"line_end":20,"column_start":19,"column_end":80,"is_primary":true,"text":[{"text":"    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);","highlight_start":19,"highlight_end":80}],"label":"the trait `SckPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC10`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `SckPin<T>`:\n  <PA5 as SckPin<embassy_stm32::peripherals::SPI1>>\n  <PB0 as SckPin<embassy_stm32::peripherals::SPI5>>\n  <PB10 as SckPin<embassy_stm32::peripherals::SPI2>>\n  <PB12 as SckPin<embassy_stm32::peripherals::SPI3>>\n  <PB13 as SckPin<embassy_stm32::peripherals::SPI2>>\n  <PB13 as SckPin<embassy_stm32::peripherals::SPI4>>\n  <PB3 as SckPin<embassy_stm32::peripherals::SPI1>>\n  <PB3 as SckPin<embassy_stm32::peripherals::SPI3>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`","code":null,"level":"note","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15594,"byte_end":15606,"line_start":457,"line_end":457,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"    pub fn new_blocking<T: Instance>(","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15704,"byte_end":15713,"line_start":459,"line_end":459,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"        sck: impl Peripheral<P = impl SckPin<T>> + 'd,","highlight_start":39,"highlight_end":48}],"label":"required by this bound in `Spi::<'d, Blocking>::new_blocking`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `PC10: SckPin<embassy_stm32::peripherals::SPI3>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\spi.rs:20:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `SckPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC10`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `SckPin<T>`:\u001b[0m\n\u001b[0m              <PA5 as SckPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB0 as SckPin<embassy_stm32::peripherals::SPI5>>\u001b[0m\n\u001b[0m              <PB10 as SckPin<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <PB12 as SckPin<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <PB13 as SckPin<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <PB13 as SckPin<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <PB3 as SckPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB3 as SckPin<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs:459:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_blocking<T: Instance>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        peri: impl Peripheral<P = T> + 'd,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sck: impl Peripheral<P = impl SckPin<T>> + 'd,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Spi::<'d, Blocking>::new_blocking`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `PC12: MosiPin<embassy_stm32::peripherals::SPI3>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\bin\\spi.rs","byte_start":464,"byte_end":525,"line_start":20,"line_end":20,"column_start":19,"column_end":80,"is_primary":true,"text":[{"text":"    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);","highlight_start":19,"highlight_end":80}],"label":"the trait `MosiPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC12`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `MosiPin<T>`:\n  <PA1 as MosiPin<embassy_stm32::peripherals::SPI4>>\n  <PA10 as MosiPin<embassy_stm32::peripherals::SPI5>>\n  <PA7 as MosiPin<embassy_stm32::peripherals::SPI1>>\n  <PB15 as MosiPin<embassy_stm32::peripherals::SPI2>>\n  <PB5 as MosiPin<embassy_stm32::peripherals::SPI1>>\n  <PB5 as MosiPin<embassy_stm32::peripherals::SPI3>>\n  <PB8 as MosiPin<embassy_stm32::peripherals::SPI5>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`","code":null,"level":"note","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15594,"byte_end":15606,"line_start":457,"line_end":457,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"    pub fn new_blocking<T: Instance>(","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15761,"byte_end":15771,"line_start":460,"line_end":460,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"        mosi: impl Peripheral<P = impl MosiPin<T>> + 'd,","highlight_start":40,"highlight_end":50}],"label":"required by this bound in `Spi::<'d, Blocking>::new_blocking`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `PC12: MosiPin<embassy_stm32::peripherals::SPI3>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\spi.rs:20:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `MosiPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC12`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `MosiPin<T>`:\u001b[0m\n\u001b[0m              <PA1 as MosiPin<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <PA10 as MosiPin<embassy_stm32::peripherals::SPI5>>\u001b[0m\n\u001b[0m              <PA7 as MosiPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB15 as MosiPin<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <PB5 as MosiPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB5 as MosiPin<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m              <PB8 as MosiPin<embassy_stm32::peripherals::SPI5>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs:460:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_blocking<T: Instance>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mosi: impl Peripheral<P = impl MosiPin<T>> + 'd,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Spi::<'d, Blocking>::new_blocking`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `PC11: MisoPin<embassy_stm32::peripherals::SPI3>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\bin\\spi.rs","byte_start":464,"byte_end":525,"line_start":20,"line_end":20,"column_start":19,"column_end":80,"is_primary":true,"text":[{"text":"    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);","highlight_start":19,"highlight_end":80}],"label":"the trait `MisoPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC11`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `MisoPin<T>`:\n  <PA11 as MisoPin<embassy_stm32::peripherals::SPI4>>\n  <PA12 as MisoPin<embassy_stm32::peripherals::SPI5>>\n  <PA6 as MisoPin<embassy_stm32::peripherals::SPI1>>\n  <PB14 as MisoPin<embassy_stm32::peripherals::SPI2>>\n  <PB4 as MisoPin<embassy_stm32::peripherals::SPI1>>\n  <PB4 as MisoPin<embassy_stm32::peripherals::SPI3>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`","code":null,"level":"note","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15594,"byte_end":15606,"line_start":457,"line_end":457,"column_start":12,"column_end":24,"is_primary":false,"text":[{"text":"    pub fn new_blocking<T: Instance>(","highlight_start":12,"highlight_end":24}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs","byte_start":15819,"byte_end":15829,"line_start":461,"line_end":461,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"        miso: impl Peripheral<P = impl MisoPin<T>> + 'd,","highlight_start":40,"highlight_end":50}],"label":"required by this bound in `Spi::<'d, Blocking>::new_blocking`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `PC11: MisoPin<embassy_stm32::peripherals::SPI3>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\spi.rs:20:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut spi = Spi::new_blocking(p.SPI3, p.PC10, p.PC12, p.PC11, spi_config);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `MisoPin<embassy_stm32::peripherals::SPI3>` is not implemented for `PC11`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `MisoPin<T>`:\u001b[0m\n\u001b[0m              <PA11 as MisoPin<embassy_stm32::peripherals::SPI4>>\u001b[0m\n\u001b[0m              <PA12 as MisoPin<embassy_stm32::peripherals::SPI5>>\u001b[0m\n\u001b[0m              <PA6 as MisoPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB14 as MisoPin<embassy_stm32::peripherals::SPI2>>\u001b[0m\n\u001b[0m              <PB4 as MisoPin<embassy_stm32::peripherals::SPI1>>\u001b[0m\n\u001b[0m              <PB4 as MisoPin<embassy_stm32::peripherals::SPI3>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `embassy_stm32::spi::Spi::<'d, embassy_stm32::mode::Blocking>::new_blocking`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-stm32\\src\\spi\\mod.rs:461:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_blocking<T: Instance>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        miso: impl Peripheral<P = impl MisoPin<T>> + 'd,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Spi::<'d, Blocking>::new_blocking`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0463.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0463.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}

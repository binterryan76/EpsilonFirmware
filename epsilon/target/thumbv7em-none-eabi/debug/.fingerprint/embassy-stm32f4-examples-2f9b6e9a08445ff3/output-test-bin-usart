{"$message_type":"diagnostic","message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src\\bin\\usart.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: can't find crate for `test`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `USART3` in module `peripherals`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-hal-internal\\src\\macros.rs","byte_start":407,"byte_end":423,"line_start":11,"line_end":11,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                pub struct $name { _private: () }","highlight_start":17,"highlight_end":33}],"label":"similarly named struct `USART1` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\examples\\stm32f4\\target\\thumbv7em-none-eabi\\debug\\build\\embassy-stm32-d96857663fa655cf\\out/_generated.rs","byte_start":0,"byte_end":1734,"line_start":1,"line_end":166,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"embassy_hal_internal::peripherals_definition!(","highlight_start":1,"highlight_end":1},{"text":"    ADC1,","highlight_start":1,"highlight_end":1},{"text":"    ADC1_COMMON,","highlight_start":1,"highlight_end":1},{"text":"    CRC,","highlight_start":1,"highlight_end":1},{"text":"    DBGMCU,","highlight_start":1,"highlight_end":1},{"text":"    DMA1,","highlight_start":1,"highlight_end":1},{"text":"    DMA2,","highlight_start":1,"highlight_end":1},{"text":"    FLASH,","highlight_start":1,"highlight_end":1},{"text":"    PA0,","highlight_start":1,"highlight_end":1},{"text":"    PA1,","highlight_start":1,"highlight_end":1},{"text":"    PA2,","highlight_start":1,"highlight_end":1},{"text":"    PA3,","highlight_start":1,"highlight_end":1},{"text":"    PA4,","highlight_start":1,"highlight_end":1},{"text":"    PA5,","highlight_start":1,"highlight_end":1},{"text":"    PA6,","highlight_start":1,"highlight_end":1},{"text":"    PA7,","highlight_start":1,"highlight_end":1},{"text":"    PA8,","highlight_start":1,"highlight_end":1},{"text":"    PA9,","highlight_start":1,"highlight_end":1},{"text":"    PA10,","highlight_start":1,"highlight_end":1},{"text":"    PA11,","highlight_start":1,"highlight_end":1},{"text":"    PA12,","highlight_start":1,"highlight_end":1},{"text":"    PA13,","highlight_start":1,"highlight_end":1},{"text":"    PA14,","highlight_start":1,"highlight_end":1},{"text":"    PA15,","highlight_start":1,"highlight_end":1},{"text":"    PB0,","highlight_start":1,"highlight_end":1},{"text":"    PB1,","highlight_start":1,"highlight_end":1},{"text":"    PB2,","highlight_start":1,"highlight_end":1},{"text":"    PB3,","highlight_start":1,"highlight_end":1},{"text":"    PB4,","highlight_start":1,"highlight_end":1},{"text":"    PB5,","highlight_start":1,"highlight_end":1},{"text":"    PB6,","highlight_start":1,"highlight_end":1},{"text":"    PB7,","highlight_start":1,"highlight_end":1},{"text":"    PB8,","highlight_start":1,"highlight_end":1},{"text":"    PB9,","highlight_start":1,"highlight_end":1},{"text":"    PB10,","highlight_start":1,"highlight_end":1},{"text":"    PB11,","highlight_start":1,"highlight_end":1},{"text":"    PB12,","highlight_start":1,"highlight_end":1},{"text":"    PB13,","highlight_start":1,"highlight_end":1},{"text":"    PB14,","highlight_start":1,"highlight_end":1},{"text":"    PB15,","highlight_start":1,"highlight_end":1},{"text":"    PC0,","highlight_start":1,"highlight_end":1},{"text":"    PC1,","highlight_start":1,"highlight_end":1},{"text":"    PC2,","highlight_start":1,"highlight_end":1},{"text":"    PC3,","highlight_start":1,"highlight_end":1},{"text":"    PC4,","highlight_start":1,"highlight_end":1},{"text":"    PC5,","highlight_start":1,"highlight_end":1},{"text":"    PC6,","highlight_start":1,"highlight_end":1},{"text":"    PC7,","highlight_start":1,"highlight_end":1},{"text":"    PC8,","highlight_start":1,"highlight_end":1},{"text":"    PC9,","highlight_start":1,"highlight_end":1},{"text":"    PC10,","highlight_start":1,"highlight_end":1},{"text":"    PC11,","highlight_start":1,"highlight_end":1},{"text":"    PC12,","highlight_start":1,"highlight_end":1},{"text":"    PC13,","highlight_start":1,"highlight_end":1},{"text":"    PC14,","highlight_start":1,"highlight_end":1},{"text":"    PC15,","highlight_start":1,"highlight_end":1},{"text":"    PD0,","highlight_start":1,"highlight_end":1},{"text":"    PD1,","highlight_start":1,"highlight_end":1},{"text":"    PD2,","highlight_start":1,"highlight_end":1},{"text":"    PD3,","highlight_start":1,"highlight_end":1},{"text":"    PD4,","highlight_start":1,"highlight_end":1},{"text":"    PD5,","highlight_start":1,"highlight_end":1},{"text":"    PD6,","highlight_start":1,"highlight_end":1},{"text":"    PD7,","highlight_start":1,"highlight_end":1},{"text":"    PD8,","highlight_start":1,"highlight_end":1},{"text":"    PD9,","highlight_start":1,"highlight_end":1},{"text":"    PD10,","highlight_start":1,"highlight_end":1},{"text":"    PD11,","highlight_start":1,"highlight_end":1},{"text":"    PD12,","highlight_start":1,"highlight_end":1},{"text":"    PD13,","highlight_start":1,"highlight_end":1},{"text":"    PD14,","highlight_start":1,"highlight_end":1},{"text":"    PD15,","highlight_start":1,"highlight_end":1},{"text":"    PE0,","highlight_start":1,"highlight_end":1},{"text":"    PE1,","highlight_start":1,"highlight_end":1},{"text":"    PE2,","highlight_start":1,"highlight_end":1},{"text":"    PE3,","highlight_start":1,"highlight_end":1},{"text":"    PE4,","highlight_start":1,"highlight_end":1},{"text":"    PE5,","highlight_start":1,"highlight_end":1},{"text":"    PE6,","highlight_start":1,"highlight_end":1},{"text":"    PE7,","highlight_start":1,"highlight_end":1},{"text":"    PE8,","highlight_start":1,"highlight_end":1},{"text":"    PE9,","highlight_start":1,"highlight_end":1},{"text":"    PE10,","highlight_start":1,"highlight_end":1},{"text":"    PE11,","highlight_start":1,"highlight_end":1},{"text":"    PE12,","highlight_start":1,"highlight_end":1},{"text":"    PE13,","highlight_start":1,"highlight_end":1},{"text":"    PE14,","highlight_start":1,"highlight_end":1},{"text":"    PE15,","highlight_start":1,"highlight_end":1},{"text":"    PH0,","highlight_start":1,"highlight_end":1},{"text":"    PH1,","highlight_start":1,"highlight_end":1},{"text":"    PH2,","highlight_start":1,"highlight_end":1},{"text":"    PH3,","highlight_start":1,"highlight_end":1},{"text":"    PH4,","highlight_start":1,"highlight_end":1},{"text":"    PH5,","highlight_start":1,"highlight_end":1},{"text":"    PH6,","highlight_start":1,"highlight_end":1},{"text":"    PH7,","highlight_start":1,"highlight_end":1},{"text":"    PH8,","highlight_start":1,"highlight_end":1},{"text":"    PH9,","highlight_start":1,"highlight_end":1},{"text":"    PH10,","highlight_start":1,"highlight_end":1},{"text":"    PH11,","highlight_start":1,"highlight_end":1},{"text":"    PH12,","highlight_start":1,"highlight_end":1},{"text":"    PH13,","highlight_start":1,"highlight_end":1},{"text":"    PH14,","highlight_start":1,"highlight_end":1},{"text":"    PH15,","highlight_start":1,"highlight_end":1},{"text":"    I2C1,","highlight_start":1,"highlight_end":1},{"text":"    I2C2,","highlight_start":1,"highlight_end":1},{"text":"    I2C3,","highlight_start":1,"highlight_end":1},{"text":"    IWDG,","highlight_start":1,"highlight_end":1},{"text":"    PWR,","highlight_start":1,"highlight_end":1},{"text":"    MCO1,","highlight_start":1,"highlight_end":1},{"text":"    RCC,","highlight_start":1,"highlight_end":1},{"text":"    RTC,","highlight_start":1,"highlight_end":1},{"text":"    SDIO,","highlight_start":1,"highlight_end":1},{"text":"    SPI1,","highlight_start":1,"highlight_end":1},{"text":"    SPI2,","highlight_start":1,"highlight_end":1},{"text":"    SPI3,","highlight_start":1,"highlight_end":1},{"text":"    SPI4,","highlight_start":1,"highlight_end":1},{"text":"    SPI5,","highlight_start":1,"highlight_end":1},{"text":"    SYSCFG,","highlight_start":1,"highlight_end":1},{"text":"    TIM1,","highlight_start":1,"highlight_end":1},{"text":"    TIM10,","highlight_start":1,"highlight_end":1},{"text":"    TIM11,","highlight_start":1,"highlight_end":1},{"text":"    TIM2,","highlight_start":1,"highlight_end":1},{"text":"    TIM3,","highlight_start":1,"highlight_end":1},{"text":"    TIM4,","highlight_start":1,"highlight_end":1},{"text":"    TIM5,","highlight_start":1,"highlight_end":1},{"text":"    TIM9,","highlight_start":1,"highlight_end":1},{"text":"    UID,","highlight_start":1,"highlight_end":1},{"text":"    USART1,","highlight_start":1,"highlight_end":1},{"text":"    USART2,","highlight_start":1,"highlight_end":1},{"text":"    USART6,","highlight_start":1,"highlight_end":1},{"text":"    USB_OTG_FS,","highlight_start":1,"highlight_end":1},{"text":"    WWDG,","highlight_start":1,"highlight_end":1},{"text":"    EXTI0,","highlight_start":1,"highlight_end":1},{"text":"    EXTI1,","highlight_start":1,"highlight_end":1},{"text":"    EXTI2,","highlight_start":1,"highlight_end":1},{"text":"    EXTI3,","highlight_start":1,"highlight_end":1},{"text":"    EXTI4,","highlight_start":1,"highlight_end":1},{"text":"    EXTI5,","highlight_start":1,"highlight_end":1},{"text":"    EXTI6,","highlight_start":1,"highlight_end":1},{"text":"    EXTI7,","highlight_start":1,"highlight_end":1},{"text":"    EXTI8,","highlight_start":1,"highlight_end":1},{"text":"    EXTI9,","highlight_start":1,"highlight_end":1},{"text":"    EXTI10,","highlight_start":1,"highlight_end":1},{"text":"    EXTI11,","highlight_start":1,"highlight_end":1},{"text":"    EXTI12,","highlight_start":1,"highlight_end":1},{"text":"    EXTI13,","highlight_start":1,"highlight_end":1},{"text":"    EXTI14,","highlight_start":1,"highlight_end":1},{"text":"    EXTI15,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH0,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH1,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH2,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH3,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH4,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH5,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH6,","highlight_start":1,"highlight_end":1},{"text":"    DMA1_CH7,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH0,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH1,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH2,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH3,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH4,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH5,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH6,","highlight_start":1,"highlight_end":1},{"text":"    DMA2_CH7","highlight_start":1,"highlight_end":1},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_hal_internal::peripherals_definition!","def_site_span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-hal-internal\\src\\macros.rs","byte_start":59,"byte_end":94,"line_start":3,"line_end":3,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"macro_rules! peripherals_definition {","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\bin\\usart.rs","byte_start":295,"byte_end":301,"line_start":11,"line_end":11,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"    USART3 => usart::InterruptHandler<peripherals::USART3>;","highlight_start":52,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\bin\\usart.rs","byte_start":295,"byte_end":301,"line_start":11,"line_end":11,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"    USART3 => usart::InterruptHandler<peripherals::USART3>;","highlight_start":52,"highlight_end":58}],"label":null,"suggested_replacement":"USART1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find type `USART3` in module `peripherals`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usart.rs:11:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    USART3 => usart::InterruptHandler<peripherals::USART3>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a struct with a similar name exists: `USART1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\examples\\stm32f4\\target\\thumbv7em-none-eabi\\debug\\build\\embassy-stm32-d96857663fa655cf\\out/_generated.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0membassy_hal_internal::peripherals_definition!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ADC1,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ADC1_COMMON,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CRC,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DMA2_CH7\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14msimilarly named struct `USART1` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `USART3` in module `$crate::interrupt::typelevel`","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-hal-internal\\src\\interrupt.rs","byte_start":4142,"byte_end":4156,"line_start":105,"line_end":105,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"                    pub enum $irqs {}","highlight_start":21,"highlight_end":35}],"label":"similarly named enum `USART1` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\examples\\stm32f4\\target\\thumbv7em-none-eabi\\debug\\build\\embassy-stm32-d96857663fa655cf\\out/_generated.rs","byte_start":3458,"byte_end":4288,"line_start":332,"line_end":390,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"embassy_hal_internal::interrupt_mod!(","highlight_start":1,"highlight_end":38},{"text":"    WWDG,","highlight_start":1,"highlight_end":10},{"text":"    PVD,","highlight_start":1,"highlight_end":9},{"text":"    TAMP_STAMP,","highlight_start":1,"highlight_end":16},{"text":"    RTC_WKUP,","highlight_start":1,"highlight_end":14},{"text":"    FLASH,","highlight_start":1,"highlight_end":11},{"text":"    RCC,","highlight_start":1,"highlight_end":9},{"text":"    EXTI0,","highlight_start":1,"highlight_end":11},{"text":"    EXTI1,","highlight_start":1,"highlight_end":11},{"text":"    EXTI2,","highlight_start":1,"highlight_end":11},{"text":"    EXTI3,","highlight_start":1,"highlight_end":11},{"text":"    EXTI4,","highlight_start":1,"highlight_end":11},{"text":"    DMA1_STREAM0,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM1,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM2,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM3,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM4,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM5,","highlight_start":1,"highlight_end":18},{"text":"    DMA1_STREAM6,","highlight_start":1,"highlight_end":18},{"text":"    ADC,","highlight_start":1,"highlight_end":9},{"text":"    EXTI9_5,","highlight_start":1,"highlight_end":13},{"text":"    TIM1_BRK_TIM9,","highlight_start":1,"highlight_end":19},{"text":"    TIM1_UP_TIM10,","highlight_start":1,"highlight_end":19},{"text":"    TIM1_TRG_COM_TIM11,","highlight_start":1,"highlight_end":24},{"text":"    TIM1_CC,","highlight_start":1,"highlight_end":13},{"text":"    TIM2,","highlight_start":1,"highlight_end":10},{"text":"    TIM3,","highlight_start":1,"highlight_end":10},{"text":"    TIM4,","highlight_start":1,"highlight_end":10},{"text":"    I2C1_EV,","highlight_start":1,"highlight_end":13},{"text":"    I2C1_ER,","highlight_start":1,"highlight_end":13},{"text":"    I2C2_EV,","highlight_start":1,"highlight_end":13},{"text":"    I2C2_ER,","highlight_start":1,"highlight_end":13},{"text":"    SPI1,","highlight_start":1,"highlight_end":10},{"text":"    SPI2,","highlight_start":1,"highlight_end":10},{"text":"    USART1,","highlight_start":1,"highlight_end":12},{"text":"    USART2,","highlight_start":1,"highlight_end":12},{"text":"    EXTI15_10,","highlight_start":1,"highlight_end":15},{"text":"    RTC_ALARM,","highlight_start":1,"highlight_end":15},{"text":"    OTG_FS_WKUP,","highlight_start":1,"highlight_end":17},{"text":"    DMA1_STREAM7,","highlight_start":1,"highlight_end":18},{"text":"    SDIO,","highlight_start":1,"highlight_end":10},{"text":"    TIM5,","highlight_start":1,"highlight_end":10},{"text":"    SPI3,","highlight_start":1,"highlight_end":10},{"text":"    DMA2_STREAM0,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM1,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM2,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM3,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM4,","highlight_start":1,"highlight_end":18},{"text":"    OTG_FS,","highlight_start":1,"highlight_end":12},{"text":"    DMA2_STREAM5,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM6,","highlight_start":1,"highlight_end":18},{"text":"    DMA2_STREAM7,","highlight_start":1,"highlight_end":18},{"text":"    USART6,","highlight_start":1,"highlight_end":12},{"text":"    I2C3_EV,","highlight_start":1,"highlight_end":13},{"text":"    I2C3_ER,","highlight_start":1,"highlight_end":13},{"text":"    FPU,","highlight_start":1,"highlight_end":9},{"text":"    SPI4,","highlight_start":1,"highlight_end":10},{"text":"    SPI5,","highlight_start":1,"highlight_end":10},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_hal_internal::interrupt_mod!","def_site_span":{"file_name":"D:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\embassy-hal-internal\\src\\interrupt.rs","byte_start":304,"byte_end":330,"line_start":11,"line_end":11,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"macro_rules! interrupt_mod {","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\bin\\usart.rs","byte_start":248,"byte_end":254,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    USART3 => usart::InterruptHandler<peripherals::USART3>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"an enum with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\bin\\usart.rs","byte_start":248,"byte_end":254,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    USART3 => usart::InterruptHandler<peripherals::USART3>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"USART1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find type `USART3` in module `$crate::interrupt::typelevel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usart.rs:11:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    USART3 => usart::InterruptHandler<peripherals::USART3>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: an enum with a similar name exists: `USART1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mD:\\Users\\Ryan\\Documents\\Projects\\Embedded Rust Blinky2\\embassy\\examples\\stm32f4\\target\\thumbv7em-none-eabi\\debug\\build\\embassy-stm32-d96857663fa655cf\\out/_generated.rs:332:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0membassy_hal_internal::interrupt_mod!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    WWDG,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PVD,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    TAMP_STAMP,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    SPI5,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14msimilarly named enum `USART1` defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `USART3` on type `Peripherals`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\usart.rs","byte_start":504,"byte_end":510,"line_start":21,"line_end":21,"column_start":42,"column_end":48,"is_primary":true,"text":[{"text":"    let mut usart = Uart::new_blocking(p.USART3, p.PD9, p.PD8, config).unwrap();","highlight_start":42,"highlight_end":48}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `ADC1`, `ADC1_COMMON`, `CRC`, `DBGMCU`, `DMA1` ... and 95 others","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `USART3` on type `Peripherals`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usart.rs:21:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut usart = Uart::new_blocking(p.USART3, p.PD9, p.PD8, config).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available fields are: `ADC1`, `ADC1_COMMON`, `CRC`, `DBGMCU`, `DMA1` ... and 95 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0412, E0463, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0412, E0463, E0609.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0412`.\u001b[0m\n"}
